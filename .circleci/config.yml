# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.5.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  test-36: &test-template
    docker:
      - image: cimg/python:3.6
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          - v1-dependencies-
      
      - run:
          name: install dependencies
          command: |
            pip install -r requirements.txt
            pip install coverage
            pip install pytest
      - save_cache:
          paths:
          - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: Run tests
          command: |
            coverage run -m pytest tests
      - store_artifacts:
          path: test-reports

  test-37:
    <<: *test-template
    docker:
      - image: cimg/python:3.7

  test-38:
    <<: *test-template
    docker:
      - image: cimg/python:3.8

  test-39:
    <<: *test-template
    docker:
      - image: cimg/python:3.9

  test-310:
    <<: *test-template
    docker:
      - image: cimg/python:3.10

  test-311:
    <<: *test-template
    docker:
      - image: cimg/python:3.11

  test-27:
    <<: *test-template
    docker:
      - image: cimg/python:2.7

  test-pypy:
    <<: *test-template
    docker:
      - image: pypy:latest

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  testing: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - test-27
      - test-36
      - test-37
      - test-38
      - test-39
      - test-310
      - test-311
      - test-pypy
